"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9045],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=c(r),f=a,h=g["".concat(i,".").concat(f)]||g[f]||p[f]||o;return r?n.createElement(h,l(l({ref:t},u),{},{components:r})):n.createElement(h,l({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=g;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},945:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_label:"search_engine_googleapi",title:"agentchat.tools.search_engine_googleapi"},l=void 0,s={unversionedId:"reference/agentchat/tools/search_engine_googleapi",id:"reference/agentchat/tools/search_engine_googleapi",isDocsHomePage:!1,title:"agentchat.tools.search_engine_googleapi",description:"GoogleAPIWrapper Objects",source:"@site/docs/reference/agentchat/tools/search_engine_googleapi.md",sourceDirName:"reference/agentchat/tools",slug:"/reference/agentchat/tools/search_engine_googleapi",permalink:"/autogen/docs/reference/agentchat/tools/search_engine_googleapi",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/agentchat/tools/search_engine_googleapi.md",tags:[],version:"current",frontMatter:{sidebar_label:"search_engine_googleapi",title:"agentchat.tools.search_engine_googleapi"},sidebar:"referenceSideBar",previous:{title:"search_engine_ddg",permalink:"/autogen/docs/reference/agentchat/tools/search_engine_ddg"},next:{title:"search_engine_serpapi",permalink:"/autogen/docs/reference/agentchat/tools/search_engine_serpapi"}},i=[{value:"GoogleAPIWrapper Objects",id:"googleapiwrapper-objects",children:[{value:"run",id:"run",children:[],level:4},{value:"safe_google_results",id:"safe_google_results",children:[],level:4}],level:2}],c={toc:i};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"googleapiwrapper-objects"},"GoogleAPIWrapper Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class GoogleAPIWrapper(BaseModel)\n")),(0,a.kt)("h4",{id:"run"},"run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"async def run(query: str,\n              max_results: int = 8,\n              as_string: bool = True,\n              focus: list[str] | None = None) -> str | list[dict]\n")),(0,a.kt)("p",null,"Return the results of a Google search using the official Google API."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"query")," - The search query."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"max_results")," - The number of results to return."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"as_string")," - A boolean flag to determine the return type of the results. If True, the function will\nreturn a formatted string with the search results. If False, it will return a list of dictionaries\ncontaining detailed information about each search result."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"focus")," - Specific information to be focused on from each search result.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  The results of the search."),(0,a.kt)("h4",{id:"safe_google_results"},"safe","_","google","_","results"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def safe_google_results(results: str | list) -> str\n")),(0,a.kt)("p",null,"Return the results of a google search in a safe format."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"results")," - The search results.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  The results of the search."))}u.isMDXComponent=!0}}]);