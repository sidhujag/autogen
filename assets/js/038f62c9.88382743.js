"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1094],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,c=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(r),g=a,f=d["".concat(l,".").concat(g)]||d[g]||p[g]||c;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=r.length,i=new Array(c);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<c;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9768:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const c={sidebar_label:"search_engine_ddg",title:"agentchat.service.search_engine_ddg"},i=void 0,o={unversionedId:"reference/agentchat/service/search_engine_ddg",id:"reference/agentchat/service/search_engine_ddg",isDocsHomePage:!1,title:"agentchat.service.search_engine_ddg",description:"DDGAPIWrapper Objects",source:"@site/docs/reference/agentchat/service/search_engine_ddg.md",sourceDirName:"reference/agentchat/service",slug:"/reference/agentchat/service/search_engine_ddg",permalink:"/autogen/docs/reference/agentchat/service/search_engine_ddg",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/agentchat/service/search_engine_ddg.md",tags:[],version:"current",frontMatter:{sidebar_label:"search_engine_ddg",title:"agentchat.service.search_engine_ddg"},sidebar:"referenceSideBar",previous:{title:"make_service",permalink:"/autogen/docs/reference/agentchat/service/make_service"},next:{title:"search_engine_googleapi",permalink:"/autogen/docs/reference/agentchat/service/search_engine_googleapi"}},l=[{value:"DDGAPIWrapper Objects",id:"ddgapiwrapper-objects",children:[{value:"run",id:"run",children:[],level:4}],level:2}],s={toc:l};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"ddgapiwrapper-objects"},"DDGAPIWrapper Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class DDGAPIWrapper()\n")),(0,a.kt)("p",null,"Wrapper around duckduckgo_search API."),(0,a.kt)("p",null,"To use this module, you should have the ",(0,a.kt)("inlineCode",{parentName:"p"},"duckduckgo_search")," Python package installed."),(0,a.kt)("h4",{id:"run"},"run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"async def run(query: str,\n              max_results: int = 8,\n              as_string: bool = True) -> str | list[dict]\n")),(0,a.kt)("p",null,"Return the results of a Google search using the official Google API"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"query")," - The search query."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"max_results")," - The number of results to return."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"as_string")," - A boolean flag to determine the return type of the results. If True, the function will\nreturn a formatted string with the search results. If False, it will return a list of dictionaries\ncontaining detailed information about each search result.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  The results of the search."))}u.isMDXComponent=!0}}]);