{
  "models": [
    {
      "model": "gpt-4",
      "api_key": "Your Azure API key here",
      "base_url": "Your Azure base URL here",
      "api_type": "azure",
      "api_version": "Your Azure API version here",
      "description": "Azure Open AI model configuration"
    },
    {
      "model": "gpt-4-turbo-preview",
      "description": "OpenAI model configuration"
    },
    {
      "model": "TheBloke/zephyr-7B-alpha-AWQ",
      "api_key": "EMPTY",
      "base_url": "http://localhost:8000/v1",
      "description": "Local model example with vLLM server endpoint"
    }
  ],
  "agents": [
    {
      "type": "agent",
      "init_code": "import os\nfrom autogen.agentchat.contrib.web_surfer import WebSurferAgent\nbing_api_key = os.getenv('BING_API_KEY')\ndownloads_folder = os.getenv('SCRATCH_DIR')\nbrowser_config={'viewport_size': 4096, 'bing_api_key': bing_api_key, 'downloads_folder': downloads_folder}\nagent = WebSurferAgent(browser_config=browser_config, **agent_spec.config.dict())",
      "config": {
        "name": "websurferagent",
        "description": "A helpful assistant that can perform web surfing actions such as informational and navigational searches, visit specific pages, scroll up or down on the current page, answer questions from page content, and summarize web pages.",
        "llm_config": {
          "config_list": [
            {
              "model": "gpt-4-turbo-preview"
            },
            {
              "model": "gpt-3.5-turbo-16k"
            }
          ],
          "temperature": 0.1,
          "timeout": 600,
          "cache_seed": null
        },
        "human_input_mode": "NEVER",
        "max_consecutive_auto_reply": 8,
        "system_message": "A helpful assistant with access to a web browser. You ARE unable to provide real-time and the most current updates because you have access to the internet. You have internal agents that can execute commands related to web surfing. Ask them to perform web searches, open pages, navigate to Wikipedia, etc. Once on a desired page, ask them to answer questions by reading the page, generate summaries, find specific words or phrases on the page (ctrl+f), or even just scroll up or down in the viewport. Two search engines are available at your disposal, google is good for quick real-time info but both are good general search engines. Default engine is bing because its fast and cheaper per query. For real-time related queries you can double both search engines. Google search has the ability to search via categories: 'news', 'places', 'images', 'search', 'videos', 'shopping', 'sports', 'events'. You have special renderers for downloading files, PDF viewing, HTML pages, plain text/wikipedia, and Youtube metadata+transcripts."
      }
    },
    {
      "type": "agent",
      "init_code": "agent = autogen.UserProxyAgent(**agent_spec.config.dict())",
      "config": {
        "name": "userproxy",
        "description": "A user proxy agent that executes code.",
        "human_input_mode": "NEVER",
        "max_consecutive_auto_reply": 5,
        "system_message": "You are a helpful assistant.",
        "default_auto_reply": "TERMINATE",
        "llm_config": false,
        "code_execution_config": {
          "work_dir": null,
          "use_docker": false,
          "executor": "commandline-local"
        }
      }
    },
    {
      "type": "agent",
      "init_code": "agent = autogen.AssistantAgent(**agent_spec.config.dict())",
      "skills": [
        {
          "title": "find_papers_arxiv",
          "description": "This skill finds relevant papers on arXiv given a query.",
          "content": "import os\nimport re\nimport json\nimport hashlib\n\n\ndef search_arxiv(query, max_results=10):\n    \"\"\"\n    Searches arXiv for the given query using the arXiv API, then returns the search results. This is a helper function. In most cases, callers will want to use 'find_relevant_papers( query, max_results )' instead.\n\n    Args:\n        query (str): The search query.\n        max_results (int, optional): The maximum number of search results to return. Defaults to 10.\n\n    Returns:\n        jresults (list): A list of dictionaries. Each dictionary contains fields such as 'title', 'authors', 'summary', and 'pdf_url'\n\n    Example:\n        >>> results = search_arxiv(\"attention is all you need\")\n        >>> print(results)\n    \"\"\"\n\n    import arxiv\n\n    key = hashlib.md5((\"search_arxiv(\" + str(max_results) + \")\" + query).encode(\"utf-8\")).hexdigest()\n    # Create the cache if it doesn't exist\n    cache_dir = \".cache\"\n    if not os.path.isdir(cache_dir):\n        os.mkdir(cache_dir)\n\n    fname = os.path.join(cache_dir, key + \".cache\")\n\n    # Cache hit\n    if os.path.isfile(fname):\n        fh = open(fname, \"r\", encoding=\"utf-8\")\n        data = json.loads(fh.read())\n        fh.close()\n        return data\n\n    # Normalize the query, removing operator keywords\n    query = re.sub(r\"[^\\s\\w]\", \" \", query.lower())\n    query = re.sub(r\"\\s(and|or|not)\\s\", \" \", \" \" + query + \" \")\n    query = re.sub(r\"[^\\s\\w]\", \" \", query.lower())\n    query = re.sub(r\"\\s+\", \" \", query).strip()\n\n    search = arxiv.Search(query=query, max_results=max_results, sort_by=arxiv.SortCriterion.Relevance)\n\n    jresults = list()\n    for result in search.results():\n        r = dict()\n        r[\"entry_id\"] = result.entry_id\n        r[\"updated\"] = str(result.updated)\n        r[\"published\"] = str(result.published)\n        r[\"title\"] = result.title\n        r[\"authors\"] = [str(a) for a in result.authors]\n        r[\"summary\"] = result.summary\n        r[\"comment\"] = result.comment\n        r[\"journal_ref\"] = result.journal_ref\n        r[\"doi\"] = result.doi\n        r[\"primary_category\"] = result.primary_category\n        r[\"categories\"] = result.categories\n        r[\"links\"] = [str(link) for link in result.links]\n        r[\"pdf_url\"] = result.pdf_url\n        jresults.append(r)\n\n    if len(jresults) > max_results:\n        jresults = jresults[0:max_results]\n\n    # Save to cache\n    fh = open(fname, \"w\")\n    fh.write(json.dumps(jresults))\n    fh.close()\n    return jresults\n",
          "file_name": "find_papers_arxiv",
          "examples": ""
        },
        {
          "title": "generate_images",
          "description": "This skill generates images from a given query using OpenAI's DALL-E model and saves them to disk.",
          "content": "from typing import List\nimport uuid\nimport requests  # to perform HTTP requests\nfrom pathlib import Path\n\nfrom openai import OpenAI\n\n\ndef generate_and_save_images(query: str, image_size: str = \"1024x1024\") -> List[str]:\n    \"\"\"\n    Function to paint, draw or illustrate images based on the users query or request. Generates images from a given query using OpenAI's DALL-E model and saves them to disk.  Use the code below anytime there is a request to create an image.\n\n    :param query: A natural language description of the image to be generated.\n    :param image_size: The size of the image to be generated. (default is \"1024x1024\")\n    :return: A list of filenames for the saved images.\n    \"\"\"\n\n    client = OpenAI()  # Initialize the OpenAI client\n    response = client.images.generate(model=\"dall-e-3\", prompt=query, n=1, size=image_size)  # Generate images\n\n    # List to store the file names of saved images\n    saved_files = []\n\n    # Check if the response is successful\n    if response.data:\n        for image_data in response.data:\n            # Generate a random UUID as the file name\n            file_name = str(uuid.uuid4()) + \".png\"  # Assuming the image is a PNG\n            file_path = Path(file_name)\n\n            img_url = image_data.url\n            img_response = requests.get(img_url)\n            if img_response.status_code == 200:\n                # Write the binary content to a file\n                with open(file_path, \"wb\") as img_file:\n                    img_file.write(img_response.content)\n                    print(f\"Image saved to {file_path}\")\n                    saved_files.append(str(file_path))\n            else:\n                print(f\"Failed to download the image from {img_url}\")\n    else:\n        print(\"No image data found in the response!\")\n\n    # Return the list of saved files\n    return saved_files\n\n\n# Example usage of the function:\n# generate_and_save_images(\"A cute baby sea otter\")\n",
          "examples": ""
        }
      ],
      "config": {
        "name": "primary_assistant",
        "description": "A primary assistant agent that writes plans and code to solve tasks.",
        "llm_config": {
          "config_list": [
            {
              "model": "gpt-4-turbo-preview"
            }
          ],
          "temperature": 0.1,
          "timeout": 600,
          "cache_seed": null
        },
        "human_input_mode": "NEVER",
        "max_consecutive_auto_reply": 8,
        "system_message": "You are a helpful AI assistant. Solve tasks using your coding and language skills. In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute. 1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself. 2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly. Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill. When using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user. If you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user. If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try. When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible. Reply 'TERMINATE' in the end when everything is done."
      }
    },
    {
      "type": "groupchat",
      "init_code": "agents = [self.load(self.sanitize_agent_spec(agent_spec_internal), session_id) for agent_spec_internal in agent_spec.groupchat_config.agents]\ngroup_chat_config = agent_spec.groupchat_config.dict()\ngroup_chat_config['agents'] = agents\ngroupchat = autogen.GroupChat(**group_chat_config)\nagent = autogen.GroupChatManager(groupchat=groupchat, **agent_spec.config.dict())",
      "config": {
        "name": "agent_service_group",
        "description": "Discover and manage agents, discover and manage skills.",
        "llm_config": {
          "config_list": [
            {
              "model": "gpt-4-turbo-preview"
            }
          ],
          "temperature": 0.1,
          "timeout": 600,
          "cache_seed": 42
        },
        "human_input_mode": "NEVER",
        "system_message": "You are a helpful manager skilled at coordinating a group of other assistants to solve a task.  You have a worker, userproxy and a work checker agent in the group to be able to manage agents (create/modify/discover skills, create/modify/discover agents). The worker has a skill to be able to do this, the userproxy executes code and returns the response the worker creates through the use of the skill and the checker ensures the worker is working properly."
      },
      "groupchat_config": {
        "admin_name": "Admin",
        "max_round": 10,
        "speaker_selection_method": "auto",
        "agents": [
          {
            "type": "agent",
            "init_code": "agent = autogen.AssistantAgent(**agent_spec.config.dict())",
            "skills": [
              {
                "title": "agent_service",
                "description": "Agent service. Create/update skills. Create/update agents (single or group type). Discover skills/agents. Add/remove skills in agents. Add/remove agents to groups.",
                "content": "from typing import Optional, List\nfrom autogenstudio.agenthelperservice import AgentHelperService\nclass AgentService:\n    @staticmethod\n    def upsert_skill(skill_id: Optional[str] = None, title: Optional[str] = None, content: Optional[str] = None, examples: Optional[str] = None, file_name: Optional[str] = None, description: Optional[str] = None) -> str:\n        \"\"\"\n        Expand agent functionality through skills. Create a new skill to get a new skill ID or update a skill with a specific skill ID. The optional values will be overwritten if specified, so make sure to be inclusive of previous values (for title, content, examples, description) for any changes.\n        NOTE: Updated skill will not be reflected in any agent's that use the skill, they will need to be removed and added again to reflect new changes.\n\n        Args:\n            skill_id (Optional): The unique identifier for the skill to be updated. Leave empty when creating new skill.\n            title (Optional): The title of the skill. Must be specified for a new skill.\n            content (Optional): The detailed code or instructions that comprise the skill. Must be specified for a new skill.\n            examples (Optional): Python code examples using the skill. Must be specified for a new skill.\n            file_name (Optional): The name of the file associated with the skill. Must be specified for a new skill.\n            description (Optional): The description of the skill. Must be specified for a new skill.\n\n        Returns:\n            str: JSON string with operation outcome, including skill details or an error message.\n        \"\"\"\n        return AgentHelperService.upsert_skill(skill_id, title, content, examples, file_name, description)\n\n    @staticmethod\n    def upsert_agent(agent_id: Optional[str] = None,\n                     new_agent_type: Optional[str] = None,\n                     init_code: Optional[str] = None,\n                     name: Optional[str] = None,\n                     system_message: Optional[str] = None,\n                     description: Optional[str] = None,\n                     skills: Optional[List[str]] = None,\n                     remove_skills: Optional[List[str]]= None,\n                     groups: Optional[List[str]]= None,\n                     remove_agents: Optional[List[str]]= None) -> str:\n        \"\"\"\n        Create a new agent to get an agent ID or Update an existing agent with a specific agent ID. The optional values will be overwritten if specified, so make sure to be inclusive of previous values (for init_code, system_message, description) for any changes.\n        NOTE: Updated agents will not be reflected in existing groupchat's, they will need to be removed and added again to reflect new changes.\n\n        Args:\n            agent_id (Optional): Unique ID for the agent. Leave empty when creating new agent. Leave empty when creating new agent.\n            new_agent_type (Optional): Specify type of new agent (either 'agent' or 'groupchat'). Must be specified when creating agent. Cannot change after. Groupchat allow other agents inside a group setting to coordinate and communicate to solve tasks.\n            init_code (Optional): Python initialization code for the agent. Enables custom agent classes and agent instatiation. Must be specified when creating agent.\n            name (Optional): Agent's name. Must be specified when creating agent.\n            system_message (Optional): System message for the agent. Must be specified when creating agent.\n            description (Optional): Agent's purpose and functionality. Must be specified when creating agent.\n            skills (Optional): List of skill IDs to add to agent. Will upsert to the list of skills.\n            remove_skills (Optional): List of skill IDs to remove from agent.\n            groups (Optional): List of agent IDs to add to 'groupchat' type of agent. Will upsert to the list of agents in the group.\n            remove_agents (Optional): List of agent IDs to remove from 'groupchat' type of agent.\n\n        Returns:\n            str: JSON string with operation outcome, including agent details or an error message.\n        \"\"\"\n        return AgentHelperService.upsert_agent(agent_id, new_agent_type, init_code, name, system_message, description, skills, remove_skills, groups, remove_agents)\n\n    @staticmethod\n    def discover_services(service_type: str, queries: List[str]) -> str:\n        \"\"\"\n        Discovers services (skills or agents) based on natural language queries.\n\n        Args:\n            service_type: Type of service to discover ('skills' or 'agents').\n            queries: List of queries for discovering services.\n\n        Returns:\n            str: JSON string with discovery results including the unique skill or agent IDs.\n        \"\"\"\n        return AgentHelperService.discover_services(service_type, queries)\n",
                "examples": "from skills import AgentService\n\n# Create a new NLP skill for task interpretation and assignment\nresponse = AgentService.upsert_skill(\n    skill_id=None,\n    title=\"NLP Task Assignment\",\n    content=\"\"\"\nfrom nlp_module import interpret_task\n\ndef assign_task(description):\n    task_details = interpret_task(description)\n    # Logic to assign task based on interpretation\n    return task_details\n\"\"\",\n    examples=\"\"\"\n# Using the NLP Task Assignment skill\nfrom skills import assign_task\n\ndescription = 'Schedule a meeting with the client next week'\ntask_details = assign_task(description)\nprint(task_details)\n\"\"\",\n    file_name=\"nlp_task_assignment.py\",\n    description=\"Interprets natural language task descriptions and assigns tasks accordingly.\"\n)\n\nprint(response)\n\n# Discover skills\nresponse = AgentService.discover_services(service_type='skills', queries=['how to parse JSON', 'image processing with Python'])\n# get skill ID\nprint(response)\n\n# Create an assistant agent (agent_id_1) with discovered skill(s)\ninit_code = 'agent = autogen.AssistantAgent(**agent_spec.config.dict())'\nresponse = AgentService.upsert_agent(agent_id=None, init_code=init_code, name='Task Assistant', system_message='Assist with various tasks.', description='An assistant designed to help with a variety of tasks.', skills=['discovered_skill_id_1'])\nprint(response)\n\n# Update agent description\ninit_code = \"agents = [self.load(self.sanitize_agent_spec(agent_spec_internal), session_id) for agent_spec_internal in agent_spec.groupchat_config.agents];group_chat_config = agent_spec.groupchat_config.dict();group_chat_config['agents'] = agents;groupchat = autogen.GroupChat(**group_chat_config);agent = autogen.GroupChatManager(groupchat=groupchat, **agent_spec.config.dict())\"\nresponse = AgentService.upsert_agent(agent_id='agent_id_1', description='New description')\nprint(response)\n\n# Create a groupchat agent with agent_id_1 added to it\ninit_code = \"agents = [self.load(self.sanitize_agent_spec(agent_spec_internal), session_id) for agent_spec_internal in agent_spec.groupchat_config.agents];group_chat_config = agent_spec.groupchat_config.dict();group_chat_config['agents'] = agents;groupchat = autogen.GroupChat(**group_chat_config);agent = autogen.GroupChatManager(groupchat=groupchat, **agent_spec.config.dict())\"\nresponse = AgentService.upsert_agent(agent_id=None, init_code=init_code, name='machine_learning_group_chat', msg='A group chat manager that has other agents specialized in machine learning which you can use to solve your task.', description='An group chat with multiple agents ready to complete your task', groups=['agent_id_1'])\nprint(response)",      
                "file_name": "agent_service.py"
              }
            ],
            "config": {
              "name": "agent_service_worker",
              "description": "Worker within the agent_service_group with a skill to create/update/discover agents, create/update/discover skills",
              "llm_config": {
                "config_list": [
                  {
                    "model": "gpt-4-turbo-preview"
                  }
                ],
                "temperature": 0.1,
                "timeout": 600,
                "cache_seed": 42
              },
              "human_input_mode": "NEVER",
              "max_consecutive_auto_reply": 8,
              "system_message": "You are a helpful AI assistant. You are in a group with a userproxy and a work checker. Solve tasks using your coding and language skills. In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the userproxy agent in your group to execute. 1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself. 2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly. Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill. When using code, you must indicate the script type in the code block. The userproxy can't modify your code. So do not suggest incomplete code which requires others to modify. Don't use a code block if it's not intended to be executed by the userproxy. If you want the userproxy to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask others to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the userproxy. If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try. When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible. Reply 'TERMINATE' in the end when everything is done. Use the agent_service to solve your agent related tasks. Use the agent services like lego blocks. Skill is the smallest building block, then agents and within agents group chats if necessary which allow you to add other agents. Before creating a skill try to discover one to see if an ideal skill for your task already exists. When creating a skill, test the code first by getting the userproxy to run the code and then create the skill. Prior to creating an agent do the same thing, discover first then create. When in creation mode, you should discover/create skills before discover/create agents and finally modify the new or existing agents based on the task. YOU ARE THE ONLY ONE in the group with access to the agent_service skill. The work checker in your group will double-check your work to make sure you are on the right path and the userproxy will execute code and return the response to the group.",
              "default_auto_reply": "This is the agent service worker, please assign me an agent related task so I can use my agent_service skill to work on or discover skills, agents and groups."
            }
          },
          {
            "type": "agent",
            "init_code": "agent = autogen.UserProxyAgent(**agent_spec.config.dict())",
            "config": {
              "name": "userproxy",
              "description": "A user proxy agent that executes code.",
              "llm_config": {
                "config_list": [
                  {
                    "model": "gpt-4-turbo-preview"
                  }
                ],
                "temperature": 0.1,
                "timeout": 600,
                "cache_seed": 42
              },
              "human_input_mode": "NEVER",
              "max_consecutive_auto_reply": 8,
              "system_message": "You are a helpful assistant. You can execute code others write. You are in the agent_service_group which is tasked with creating/managing agents in an agent framework. Take a look at the message posed to the group by the user and ensure you work diligently to solve the problem by executing tasks and returning results. If the group has reached a natural conclusion and should terminate, just reply with TERMINATE",
              "default_auto_reply": "This is user proxy agent, send some code my way so I can execute it as needed.",
              "code_execution_config": {
                "work_dir": null,
                "use_docker": false,
                "executor": "commandline-local"
              }
            }
          },
          {
            "type": "agent",
            "init_code": "agent = autogen.AssistantAgent(**agent_spec.config.dict())",
            "config": {
              "name": "agent_service_work_checker",
              "description": "Checks the work of agent_service_worker to ensure quality and correctness",
              "llm_config": {
                "config_list": [
                  {
                    "model": "gpt-4-turbo-preview"
                  }
                ],
                "temperature": 0.1,
                "timeout": 600,
                "cache_seed": 42
              },
              "human_input_mode": "NEVER",
              "max_consecutive_auto_reply": 8,
              "system_message": "You are a helpful AI assistant. Your job is to check the work of agent_service_worker and make sure based on the task the group is working on is efficiently solved. You can review the process and use common sense to solve the task or direct the worker to create code and the userproxy agent in your group will execute and report the responses back to the group. Make sure the task is fully solved before you agree that group has reached a natural conclusion. If its not solvable you can also explain why and try to steer the group towards closure. The worker is the only agent in the group which has access to the skill which guides the agent to create code to create/manage/discover agents/skills/groups. Think of the agent services as lego blocks. Groups may depend on agents inside (group is just a type of agent), agents may depend on skills which get added to them and skills are just python routines the worker can create for the userproxy to execute.",
              "default_auto_reply": "This is the agent_service_work_checker, I check the work of agent_service_worker and suggest corrective actions as needed."
            }
          }
        ]
      }
    }
  ],
  "skills": [
    {
      "title": "fetch_profile",
      "description": "This skill fetches the text content from a personal website.",
      "content": "from typing import Optional\nimport requests\nfrom bs4 import BeautifulSoup\n\n\ndef fetch_user_profile(url: str) -> Optional[str]:\n    \"\"\"\n    Fetches the text content from a personal website.\n\n    Given a URL of a person's personal website, this function scrapes\n    the content of the page and returns the text found within the <body>.\n\n    Args:\n        url (str): The URL of the person's personal website.\n\n    Returns:\n        Optional[str]: The text content of the website's body, or None if any error occurs.\n    \"\"\"\n    try:\n        # Send a GET request to the URL\n        response = requests.get(url)\n        # Check for successful access to the webpage\n        if response.status_code == 200:\n            # Parse the HTML content of the page using BeautifulSoup\n            soup = BeautifulSoup(response.text, \"html.parser\")\n            # Extract the content of the <body> tag\n            body_content = soup.find(\"body\")\n            # Return all the text in the body tag, stripping leading/trailing whitespaces\n            return \" \".join(body_content.stripped_strings) if body_content else None\n        else:\n            # Return None if the status code isn't 200 (success)\n            return None\n    except requests.RequestException:\n        # Return None if any request-related exception is caught\n        return None\n",
      "examples": "",
      "file_name": "fetch_profile.py"
    },
    {
      "title": "generate_images",
      "description": "This skill generates images from a given query using OpenAI's DALL-E model and saves them to disk.",
      "content": "from typing import List\nimport uuid\nimport requests  # to perform HTTP requests\nfrom pathlib import Path\n\nfrom openai import OpenAI\n\n\ndef generate_and_save_images(query: str, image_size: str = \"1024x1024\") -> List[str]:\n    \"\"\"\n    Function to paint, draw or illustrate images based on the users query or request. Generates images from a given query using OpenAI's DALL-E model and saves them to disk.  Use the code below anytime there is a request to create an image.\n\n    :param query: A natural language description of the image to be generated.\n    :param image_size: The size of the image to be generated. (default is \"1024x1024\")\n    :return: A list of filenames for the saved images.\n    \"\"\"\n\n    client = OpenAI()  # Initialize the OpenAI client\n    response = client.images.generate(model=\"dall-e-3\", prompt=query, n=1, size=image_size)  # Generate images\n\n    # List to store the file names of saved images\n    saved_files = []\n\n    # Check if the response is successful\n    if response.data:\n        for image_data in response.data:\n            # Generate a random UUID as the file name\n            file_name = str(uuid.uuid4()) + \".png\"  # Assuming the image is a PNG\n            file_path = Path(file_name)\n\n            img_url = image_data.url\n            img_response = requests.get(img_url)\n            if img_response.status_code == 200:\n                # Write the binary content to a file\n                with open(file_path, \"wb\") as img_file:\n                    img_file.write(img_response.content)\n                    print(f\"Image saved to {file_path}\")\n                    saved_files.append(str(file_path))\n            else:\n                print(f\"Failed to download the image from {img_url}\")\n    else:\n        print(\"No image data found in the response!\")\n\n    # Return the list of saved files\n    return saved_files\n",
      "examples": "from skills import generate_and_save_images\n\nfilenames = generate_and_save_images(\"A cute baby sea otter\")\nprint(filenames)\n",
      "file_name": "generate_images.py"
    },
    {
      "title": "send_command_to_coding_assistant",
      "description": "Executes various commands through a coding assistant, supporting operations like code management, version control, testing, and more. Designed for versatility in coding tasks.",
      "content": "from typing import Optional\nfrom autogenstudio.codingassistanceservice import CodingAssistantService\n\ndef send_command_to_coding_assistant(\n    assistant_name: str,\n    command: str,\n    args: Optional[str] = None,\n    gh_remote_url: Optional[str] = None,\n    description: Optional[str] = None,\n    private: Optional[bool] = None\n) -> str:\n    \"\"\"\n    Executes commands via a coding assistant. Enables diverse coding operations including reviews, fixes, and version control.\n\n    Args:\n        assistant_name (str): Coding assistant identifier.\n        command (str): Command to execute.\n        args (Optional[str]): Command arguments.\n        gh_remote_url (Optional[str]): GitHub URL for initial setup.\n        description (Optional[str]): Repo description.\n        private (Optional[bool]): Repo privacy setting.\n\n    Returns:\n        str: JSON-formatted command execution result.\n\n    Commands:\n        - 'cmd_clear': Clears console. No args. \n        - 'cmd_ls': Lists directory files. No args.\n        - 'cmd_undo': Undoes last operation. No args.\n        - 'cmd_diff': Shows diffs. No args.\n        - 'cmd_tokens': Displays token usage. No args.\n        - 'get_repo_map': Retrieves repo mapping. No args.\n        - 'cmd_message': \"Review and fix code.\" (natural language query)\n        - 'cmd_git': \"pull\" (git command)\n        - 'cmd_run': \"echo 'Hello'\" (shell command)\n        - 'cmd_pr': \"Feature X implementation\" (PR body)\n        - 'show_file': \"/path/to/file.py\" (file path)\n\n    \"\"\"\n    return CodingAssistantService.send_command_to_coding_assistant(assistant_name, command, args, gh_remote_url, description, private)",
      "examples": "from skills import send_command_to_coding_assistant\n\nresponse = send_command_to_coding_assistant('assistant_name', 'cmd_message', 'Review and fix code.')\nprint(response)\n",
      "file_name": "send_command_to_coding_assistant.py"
    },          
    {
      "title": "fetch_json",
      "description": "Simplifies HTTP GET or POST requests for JSON data retrieval or submission, utilizing AgentHelperService for execution. Ideal for interactions with RESTful APIs.",
      "content": "from autogenstudio.agentservice import AgentHelperService\n\n\ndef fetch_json(url, payload=None, method='GET'):\n    \"\"\"\n    Simplifies fetching or submitting JSON data via HTTP GET or POST, leveraging AgentService. Supports versatile applications in data retrieval or API interactions.\n\n    Args:\n        url (str): Target URL for the JSON data.\n        payload (dict, optional): Payload for POST requests.\n        method (str): 'GET' or 'POST' HTTP method.\n\n    Returns:\n        dict: JSON response as a dictionary.\n\n    Example:\n        # GET data\n        >>> from skills import fetch_json\n        >>> response = fetch_json('https://api.example.com/data')\n        >>> print(response)\n        # POST data\n        >>> from skills import fetch_json\n        >>> response = fetch_json('https://api.example.com/submit', payload={'key': 'value'}, method='POST')\n        >>> print(response)\n    \"\"\"\n    return AgentHelperService.fetch_json(url, payload, method)\n",
      "examples": "from skills import fetch_json\n\n# GET data\nresponse = fetch_json('https://api.example.com/data')\nprint(response)\n\n# POST data\nresponse = fetch_json('https://api.example.com/submit', payload={'key': 'value'}, method='POST')\nprint(response)\n",
      "file_name": "fetch_json.py"
    },
    {
      "title": "agent_service",
      "description": "Agent service. Create/update skills. Create/update agents (single or group type). Discover skills/agents. Add/remove skills in agents. Add/remove agents to groups.",
      "content": "from typing import Optional, List\nfrom autogenstudio.agenthelperservice import AgentHelperService\nclass AgentService:\n    @staticmethod\n    def upsert_skill(skill_id: Optional[str] = None, title: Optional[str] = None, content: Optional[str] = None, examples: Optional[str] = None, file_name: Optional[str] = None, description: Optional[str] = None) -> str:\n        \"\"\"\n        Expand agent functionality through skills. Create a new skill to get a new skill ID or update a skill with a specific skill ID. The optional values will be overwritten if specified, so make sure to be inclusive of previous values (for title, content, examples, description) for any changes.\n        NOTE: Updated skill will not be reflected in any agent's that use the skill, they will need to be removed and added again to reflect new changes.\n\n        Args:\n            skill_id (Optional): The unique identifier for the skill to be updated. Leave empty when creating new skill.\n            title (Optional): The title of the skill. Must be specified for a new skill.\n            content (Optional): The detailed code or instructions that comprise the skill. Must be specified for a new skill.\n            examples (Optional): Python code examples using the skill. Must be specified for a new skill.\n            file_name (Optional): The name of the file associated with the skill. Must be specified for a new skill.\n            description (Optional): The description of the skill. Must be specified for a new skill.\n\n        Returns:\n            str: JSON string with operation outcome, including skill details or an error message.\n        \"\"\"\n        return AgentHelperService.upsert_skill(skill_id, title, content, examples, file_name, description)\n\n    @staticmethod\n    def upsert_agent(agent_id: Optional[str] = None,\n                     new_agent_type: Optional[str] = None,\n                     init_code: Optional[str] = None,\n                     name: Optional[str] = None,\n                     system_message: Optional[str] = None,\n                     description: Optional[str] = None,\n                     skills: Optional[List[str]] = None,\n                     remove_skills: Optional[List[str]]= None,\n                     groups: Optional[List[str]]= None,\n                     remove_agents: Optional[List[str]]= None) -> str:\n        \"\"\"\n        Create a new agent to get an agent ID or Update an existing agent with a specific agent ID. The optional values will be overwritten if specified, so make sure to be inclusive of previous values (for init_code, system_message, description) for any changes.\n        NOTE: Updated agents will not be reflected in existing groupchat's, they will need to be removed and added again to reflect new changes.\n\n        Args:\n            agent_id (Optional): Unique ID for the agent. Leave empty when creating new agent. Leave empty when creating new agent.\n            new_agent_type (Optional): Specify type of new agent (either 'agent' or 'groupchat'). Must be specified when creating agent. Cannot change after. Groupchat allow other agents inside a group setting to coordinate and communicate to solve tasks.\n            init_code (Optional): Python initialization code for the agent. Enables custom agent classes and agent instatiation. Must be specified when creating agent.\n            name (Optional): Agent's name. Must be specified when creating agent.\n            system_message (Optional): System message for the agent. Must be specified when creating agent.\n            description (Optional): Agent's purpose and functionality. Must be specified when creating agent.\n            skills (Optional): List of skill IDs to add to agent. Will upsert to the list of skills.\n            remove_skills (Optional): List of skill IDs to remove from agent.\n            groups (Optional): List of agent IDs to add to 'groupchat' type of agent. Will upsert to the list of agents in the group.\n            remove_agents (Optional): List of agent IDs to remove from 'groupchat' type of agent.\n\n        Returns:\n            str: JSON string with operation outcome, including agent details or an error message.\n        \"\"\"\n        return AgentHelperService.upsert_agent(agent_id, new_agent_type, init_code, name, system_message, description, skills, remove_skills, groups, remove_agents)\n\n    @staticmethod\n    def discover_services(service_type: str, queries: List[str]) -> str:\n        \"\"\"\n        Discovers services (skills or agents) based on natural language queries.\n\n        Args:\n            service_type: Type of service to discover ('skills' or 'agents').\n            queries: List of queries for discovering services.\n\n        Returns:\n            str: JSON string with discovery results including the unique skill or agent IDs.\n        \"\"\"\n        return AgentHelperService.discover_services(service_type, queries)\n",
      "examples": "from skills import AgentService\n\n# Create a new NLP skill for task interpretation and assignment\nresponse = AgentService.upsert_skill(\n    skill_id=None,\n    title=\"NLP Task Assignment\",\n    content=\"\"\"\nfrom nlp_module import interpret_task\n\ndef assign_task(description):\n    task_details = interpret_task(description)\n    # Logic to assign task based on interpretation\n    return task_details\n\"\"\",\n    examples=\"\"\"\n# Using the NLP Task Assignment skill\nfrom skills import assign_task\n\ndescription = 'Schedule a meeting with the client next week'\ntask_details = assign_task(description)\nprint(task_details)\n\"\"\",\n    file_name=\"nlp_task_assignment.py\",\n    description=\"Interprets natural language task descriptions and assigns tasks accordingly.\"\n)\n\nprint(response)\n\n# Discover skills\nresponse = AgentService.discover_services(service_type='skills', queries=['how to parse JSON', 'image processing with Python'])\n# get skill ID\nprint(response)\n\n# Create an assistant agent (agent_id_1) with discovered skill(s)\ninit_code = 'agent = autogen.AssistantAgent(**agent_spec.config.dict())'\nresponse = AgentService.upsert_agent(agent_id=None, init_code=init_code, name='Task Assistant', system_message='Assist with various tasks.', description='An assistant designed to help with a variety of tasks.', skills=['discovered_skill_id_1'])\nprint(response)\n\n# Update agent description\ninit_code = \"agents = [self.load(self.sanitize_agent_spec(agent_spec_internal), session_id) for agent_spec_internal in agent_spec.groupchat_config.agents];group_chat_config = agent_spec.groupchat_config.dict();group_chat_config['agents'] = agents;groupchat = autogen.GroupChat(**group_chat_config);agent = autogen.GroupChatManager(groupchat=groupchat, **agent_spec.config.dict())\"\nresponse = AgentService.upsert_agent(agent_id='agent_id_1', description='New description')\nprint(response)\n\n# Create a groupchat agent with agent_id_1 added to it\ninit_code = \"agents = [self.load(self.sanitize_agent_spec(agent_spec_internal), session_id) for agent_spec_internal in agent_spec.groupchat_config.agents];group_chat_config = agent_spec.groupchat_config.dict();group_chat_config['agents'] = agents;groupchat = autogen.GroupChat(**group_chat_config);agent = autogen.GroupChatManager(groupchat=groupchat, **agent_spec.config.dict())\"\nresponse = AgentService.upsert_agent(agent_id=None, init_code=init_code, name='machine_learning_group_chat', msg='A group chat manager that has other agents specialized in machine learning which you can use to solve your task.', description='An group chat with multiple agents ready to complete your task', groups=['agent_id_1'])\nprint(response)",      
      "file_name": "agent_service.py"
    },
    {
      "title": "zapier_integration",
      "description": "Facilitates interaction with Zapier for checking API status, configuring AI Actions, listing and executing actions, and retrieving execution logs. This skill provides a comprehensive set of actions to integrate and automate tasks with Zapier, enabling dynamic interaction with various applications and services. Example actions: Gmail: Send Email, Telegram: Send Message, Google Calendar: Find Event, Google Calendar: Quick Add Event, Google Sheets: Create Spreadsheet, Discord: Send Channel Message.",      
      "content": "from typing import Optional\nfrom autogenstudio.zapierservice import ZapierService\n\nclass ZapierSkill:\n    def __init__(self):\n        \"\"\"Initializes the Zapier skill for Zapier actions.\n        IMPORTANT: This skill enables interaction with Zapier to check API status,\n        get configuration links, list exposed actions, execute actions, and retrieve execution logs.\n        \"\"\"\n\n    def zapier_api_check(self) -> str:\n        \"\"\"Tests that the API and auth are working.\"\"\"\n        return ZapierService.zapier_api_check()\n\n    def zapier_api_get_configuration_link(self) -> str:\n        \"\"\"Provides a link to configure more AI Actions.\"\"\"\n        return ZapierService.zapier_api_get_configuration_link()\n\n    def zapier_api_list_exposed_actions(self) -> str:\n        \"\"\"Lists all the currently exposed actions for the given account.\"\"\"\n        return ZapierService.zapier_api_list_exposed_actions()\n\n    def zapier_api_execute_action(self, exposed_app_action_id: str, action_parameters: str, preview_only: Optional[bool] = False) -> str:\n        \"\"\"Executes an action with parameters in the HTTP POST API call to Zapier.\n\n        Args:\n            exposed_app_action_id (str): Action ID found through zapier_api_list_exposed_actions.\n            action_parameters (str): Parameters for the action, structured as a JSON string.\n            preview_only (Optional[bool]): If the action should be previewed as a test.\n        \"\"\"\n        return ZapierService.zapier_api_execute_action(exposed_app_action_id, action_parameters, preview_only)\n\n    def zapier_api_execute_log(self, execution_log_id: str) -> str:\n        \"\"\"Gets the execution log for a given execution log id.\n\n        Args:\n            execution_log_id (str): Execution Log ID found through zapier_api_execute_action.\n        \"\"\"\n        return ZapierService.zapier_api_execute_log(execution_log_id)\n\n    def zapier_api_create_action(self, configuration_link: str, action_description: str) -> str:\n        \"\"\"Gives URL to create a new AI Action within Zapier API.\n\n        Args:\n            configuration_link (str): Configuration link for AI Actions setup.\n            action_description (str): Description of the action to be created.\n        \"\"\"\n        return ZapierService.zapier_api_create_action(configuration_link, action_description)\n",
      "examples": "import json\nfrom skills import ZapierSkill\n\n# Initialize the Zapier skill\nzapier_skill = ZapierSkill()\n\n# Example usage of zapier_api_check\napi_check_result = zapier_skill.zapier_api_check()\nprint('API Check Result:', api_check_result)\n\n# Example usage of zapier_api_get_configuration_link\n# Provides a link to configure more AI Actions.\nconfig_link = zapier_skill.zapier_api_get_configuration_link()\nprint('Configuration Link:', config_link)\n\n# Example usage of zapier_api_list_exposed_actions\n# Lists all the currently exposed actions for the given account.\nexposed_actions = zapier_skill.zapier_api_list_exposed_actions()\nprint('Exposed Actions:', exposed_actions)\n\n# Example usage of zapier_api_execute_action\n# Executes an action with parameters in the HTTP POST API call to Zapier.\n# Example action ID, found from exposed_actions\naction_id = '01ARZ3NDEKTSV4RRFFQ69G5FAV'\n\n# Example parameters as string of JSON key-value pairs\naction_params = {'Subject': 'just testing', 'Body': 'hello from bob', 'To': 'terry@gmail.com'}'\naction_params_json = json.dumps(naction_params)\nexecute_action_result = zapier_skill.zapier_api_execute_action(exposed_app_action_id=action_id, action_parameters=action_params_json, preview_only=False)\nprint('Execute Action Result:', execute_action_result)\n\n# Example usage of zapier_api_execute_log\n# Gets the execution log for a given execution log id.\n# Example execution log ID, found from execute_action_result\nexecution_log_id = 'example-log-id'\nexecution_log = zapier_skill.zapier_api_execute_log(execution_log_id=execution_log_id)\nprint('Execution Log:', execution_log)\n\n# Example usage of zapier_api_create_action\n# Gives URL to create a new AI Action within Zapier API.\n# fetched from zapier_api_get_configuration_link()\nconfiguration_link = config_link\naction_description = 'Gmail: Send Email'\ncreate_action_result = zapier_skill.zapier_api_create_action(configuration_link=configuration_link, action_description=action_description)\nprint('Create Action Result:', create_action_result)\n",
      "file_name": "zapier_integration.py"
    }
  ],
  "workflows": [
    {
      "name": "Travel Agent Group Chat Workflow",
      "description": "A group chat workflow",
      "type": "groupchat",
      "sender": {
        "type": "agent",
        "init_code": "agent = autogen.UserProxyAgent(**agent_spec.config.dict())",
        "config": {
          "name": "userproxy",
          "human_input_mode": "NEVER",
          "max_consecutive_auto_reply": 5,
          "system_message": "You are a helpful assistant. Read the history and terminate once done with a sufficient answer, don't terminate prematurely.",
          "default_auto_reply": "TERMINATE",
          "code_execution_config": {
            "work_dir": null,
            "use_docker": false,
            "executor": "commandline-local"
          }
        }
      },
      "receiver": {
        "type": "groupchat",
        "init_code": "agents = [self.load(self.sanitize_agent_spec(agent_spec_internal), session_id) for agent_spec_internal in agent_spec.groupchat_config.agents]\ngroup_chat_config = agent_spec.groupchat_config.dict()\ngroup_chat_config['agents'] = agents\ngroupchat = autogen.GroupChat(**group_chat_config)\nagent = autogen.GroupChatManager(groupchat=groupchat, **agent_spec.config.dict())",
        "config": {
          "name": "group_chat_manager",
          "llm_config": {
            "config_list": [
              {
                "model": "gpt-4-turbo-preview"
              }
            ],
            "temperature": 0.1,
            "timeout": 600,
            "cache_seed": 42
          },
          "human_input_mode": "NEVER",
          "system_message": "Group chat manager"
        },
        "groupchat_config": {
          "admin_name": "Admin",
          "max_round": 10,
          "speaker_selection_method": "auto",
          "agents": [
            {
              "type": "agent",
              "init_code": "agent = autogen.AssistantAgent(**agent_spec.config.dict())",
              "config": {
                "name": "travel_planner",
                "llm_config": {
                  "config_list": [
                    {
                      "model": "gpt-4-turbo-preview"
                    }
                  ],
                  "temperature": 0.1,
                  "timeout": 600,
                  "cache_seed": 42
                },
                "human_input_mode": "NEVER",
                "max_consecutive_auto_reply": 8,
                "system_message": "You are a helpful assistant that can suggest a travel plan for a user. You are the primary cordinator who will receive suggestions or advice from other agents (local_assistant, language_assistant). You must ensure that the finally plan integrates the suggestions from other agents or team members. YOUR FINAL RESPONSE MUST BE THE COMPLETE PLAN. Don't repeat responses. Ensure that each prompt or question is unique or add a variation if you need to reiterate a question. When the plan is complete and all perspectives are integrated, you can respond with TERMINATE.",
                "default_auto_reply": "TERMINATE"
              }
            },
            {
              "type": "agent",
              "init_code": "agent = autogen.AssistantAgent(**agent_spec.config.dict())",
              "config": {
                "name": "local_assistant",
                "llm_config": {
                  "config_list": [
                    {
                      "model": "gpt-4-turbo-preview"
                    }
                  ],
                  "temperature": 0.1,
                  "timeout": 600,
                  "cache_seed": 42
                },
                "human_input_mode": "NEVER",
                "max_consecutive_auto_reply": 8,
                "system_message": "You are a helpful assistant in a group that can review travel plans, providing critical feedback on how the trip can be enriched for enjoyment of the local culture. If the plan already includes local experiences, you can mention that the plan is satisfactory, with rationale. Don't repeat responses. Ensure that each prompt or question is unique or add a variation if you need to reiterate a question. Reply with TERMINATE if you think the group is finished.",
                "default_auto_reply": "TERMINATE"
              }
            },
            {
              "type": "agent",
              "init_code": "agent = autogen.AssistantAgent(**agent_spec.config.dict())",
              "config": {
                "name": "language_assistant",
                "llm_config": {
                  "config_list": [
                    {
                      "model": "gpt-4-turbo-preview"
                    }
                  ],
                  "temperature": 0.1,
                  "timeout": 600,
                  "cache_seed": 42
                },
                "human_input_mode": "NEVER",
                "max_consecutive_auto_reply": 8,
                "system_message": "You are a helpful assistant that can review travel plans, providing feedback on important/critical tips about how best to address language or communication challenges for the given destination. If the plan already includes language tips, you can mention that the plan is satisfactory, with rationale. Don't repeat responses. Ensure that each prompt or question is unique or add a variation if you need to reiterate a question. Reply with TERMINATE if you think the group is finished.",
                "default_auto_reply": "TERMINATE"
              }
            }
          ]
        }
      }
    },
    {
      "name": "General Agent Workflow",
      "description": "This workflow is used for general purpose tasks.",
      "summary_method": "llm",
      "sender": {
        "type": "agent",
        "init_code": "agent = autogen.UserProxyAgent(**agent_spec.config.dict())",
        "config": {
          "name": "userproxy",
          "description": "A user proxy agent that executes code.",
          "human_input_mode": "NEVER",
          "max_consecutive_auto_reply": 10,
          "system_message": "You are a helpful assistant.",
          "default_auto_reply": "TERMINATE",
          "llm_config": false,
          "code_execution_config": {
            "work_dir": null,
            "use_docker": false,
            "executor": "commandline-local"
          }
        }
      },
      "receiver": {
        "type": "agent",
        "init_code": "agent = autogen.AssistantAgent(**agent_spec.config.dict())",
        "skills": [
          {
            "title": "find_papers_arxiv",
            "description": "This skill finds relevant papers on arXiv given a query.",
            "content": "import os\nimport re\nimport json\nimport hashlib\n\n\ndef search_arxiv(query, max_results=10):\n    \"\"\"\n    Searches arXiv for the given query using the arXiv API, then returns the search results. This is a helper function. In most cases, callers will want to use 'find_relevant_papers( query, max_results )' instead.\n\n    Args:\n        query (str): The search query.\n        max_results (int, optional): The maximum number of search results to return. Defaults to 10.\n\n    Returns:\n        jresults (list): A list of dictionaries. Each dictionary contains fields such as 'title', 'authors', 'summary', and 'pdf_url'\n\n    Example:\n        >>> results = search_arxiv(\"attention is all you need\")\n        >>> print(results)\n    \"\"\"\n\n    import arxiv\n\n    key = hashlib.md5((\"search_arxiv(\" + str(max_results) + \")\" + query).encode(\"utf-8\")).hexdigest()\n    # Create the cache if it doesn't exist\n    cache_dir = \".cache\"\n    if not os.path.isdir(cache_dir):\n        os.mkdir(cache_dir)\n\n    fname = os.path.join(cache_dir, key + \".cache\")\n\n    # Cache hit\n    if os.path.isfile(fname):\n        fh = open(fname, \"r\", encoding=\"utf-8\")\n        data = json.loads(fh.read())\n        fh.close()\n        return data\n\n    # Normalize the query, removing operator keywords\n    query = re.sub(r\"[^\\s\\w]\", \" \", query.lower())\n    query = re.sub(r\"\\s(and|or|not)\\s\", \" \", \" \" + query + \" \")\n    query = re.sub(r\"[^\\s\\w]\", \" \", query.lower())\n    query = re.sub(r\"\\s+\", \" \", query).strip()\n\n    search = arxiv.Search(query=query, max_results=max_results, sort_by=arxiv.SortCriterion.Relevance)\n\n    jresults = list()\n    for result in search.results():\n        r = dict()\n        r[\"entry_id\"] = result.entry_id\n        r[\"updated\"] = str(result.updated)\n        r[\"published\"] = str(result.published)\n        r[\"title\"] = result.title\n        r[\"authors\"] = [str(a) for a in result.authors]\n        r[\"summary\"] = result.summary\n        r[\"comment\"] = result.comment\n        r[\"journal_ref\"] = result.journal_ref\n        r[\"doi\"] = result.doi\n        r[\"primary_category\"] = result.primary_category\n        r[\"categories\"] = result.categories\n        r[\"links\"] = [str(link) for link in result.links]\n        r[\"pdf_url\"] = result.pdf_url\n        jresults.append(r)\n\n    if len(jresults) > max_results:\n        jresults = jresults[0:max_results]\n\n    # Save to cache\n    fh = open(fname, \"w\")\n    fh.write(json.dumps(jresults))\n    fh.close()\n    return jresults\n",
            "examples": ""
          },
          {
            "title": "generate_images",
            "description": "This skill generates images from a given query using OpenAI's DALL-E model and saves them to disk.",
            "content": "from typing import List\nimport uuid\nimport requests  # to perform HTTP requests\nfrom pathlib import Path\n\nfrom openai import OpenAI\n\n\ndef generate_and_save_images(query: str, image_size: str = \"1024x1024\") -> List[str]:\n    \"\"\"\n    Function to paint, draw or illustrate images based on the users query or request. Generates images from a given query using OpenAI's DALL-E model and saves them to disk.  Use the code below anytime there is a request to create an image.\n\n    :param query: A natural language description of the image to be generated.\n    :param image_size: The size of the image to be generated. (default is \"1024x1024\")\n    :return: A list of filenames for the saved images.\n    \"\"\"\n\n    client = OpenAI()  # Initialize the OpenAI client\n    response = client.images.generate(model=\"dall-e-3\", prompt=query, n=1, size=image_size)  # Generate images\n\n    # List to store the file names of saved images\n    saved_files = []\n\n    # Check if the response is successful\n    if response.data:\n        for image_data in response.data:\n            # Generate a random UUID as the file name\n            file_name = str(uuid.uuid4()) + \".png\"  # Assuming the image is a PNG\n            file_path = Path(file_name)\n\n            img_url = image_data.url\n            img_response = requests.get(img_url)\n            if img_response.status_code == 200:\n                # Write the binary content to a file\n                with open(file_path, \"wb\") as img_file:\n                    img_file.write(img_response.content)\n                    print(f\"Image saved to {file_path}\")\n                    saved_files.append(str(file_path))\n            else:\n                print(f\"Failed to download the image from {img_url}\")\n    else:\n        print(\"No image data found in the response!\")\n\n    # Return the list of saved files\n    return saved_files\n\n\n# Example usage of the function:\n# generate_and_save_images(\"A cute baby sea otter\")\n",
            "examples": ""
          }
        ],
        "config": {
          "name": "primary_assistant",
          "description": "Default assistant to generate plans and write code to solve tasks.",
          "llm_config": {
            "config_list": [
              {
                "model": "gpt-4-1106-preview"
              }
            ],
            "temperature": 0.1,
            "timeout": 600,
            "cache_seed": null
          },
          "human_input_mode": "NEVER",
          "max_consecutive_auto_reply": 15,
          "system_message": "You are a helpful AI assistant. Solve tasks using your coding and language skills. In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute. 1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself. 2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly. Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill. When using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user. If you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user. If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try. When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible. Reply 'TERMINATE' in the end when everything is done."
        }
      },
      "type": "twoagents"
    },
    {
      "name": "Agent Service workflow",
      "description": "Create/manage/discover agents and skills",
      "summary_method": "llm",
      "type": "groupchat",
      "sender": {
        "type": "agent",
        "init_code": "agent = autogen.UserProxyAgent(**agent_spec.config.dict())",
        "config": {
          "name": "userproxy",
          "human_input_mode": "NEVER",
          "max_consecutive_auto_reply": 5,
          "default_auto_reply": "TERMINATE",
          "code_execution_config": {
            "work_dir": null,
            "use_docker": false,
            "executor": "commandline-local"
          }
        }
      },
      "receiver": {
        "type": "groupchat",
        "init_code": "agents = [self.load(self.sanitize_agent_spec(agent_spec_internal), session_id) for agent_spec_internal in agent_spec.groupchat_config.agents]\ngroup_chat_config = agent_spec.groupchat_config.dict()\ngroup_chat_config['agents'] = agents\ngroupchat = autogen.GroupChat(**group_chat_config)\nagent = autogen.GroupChatManager(groupchat=groupchat, **agent_spec.config.dict())",
        "config": {
          "name": "agent_service_group",
          "description": "Discover and manage agents, discover and manage skills.",
          "llm_config": {
            "config_list": [
              {
                "model": "gpt-4-turbo-preview"
              }
            ],
            "temperature": 0.1,
            "timeout": 600,
            "cache_seed": 42
          },
          "human_input_mode": "NEVER",
          "system_message": "You are a helpful manager skilled at coordinating a group of other assistants to solve a task.  You have a worker, userproxy and a work checker agent in the group to be able to manage agents (create/modify/discover skills, create/modify/discover agents). The worker has a skill to be able to do this, the userproxy executes code and returns the response the worker creates through the use of the skill and the checker ensures the worker is working properly."
        },
        "groupchat_config": {
          "admin_name": "Admin",
          "max_round": 10,
          "speaker_selection_method": "auto",
          "agents": [
            {
              "type": "agent",
              "init_code": "agent = autogen.AssistantAgent(**agent_spec.config.dict())",
              "skills": [
                {
                  "title": "agent_service",
                  "description": "Agent service. Create/update skills. Create/update agents (single or group type). Discover skills/agents. Add/remove skills in agents. Add/remove agents to groups.",
                  "content": "from typing import Optional, List\nfrom autogenstudio.agenthelperservice import AgentHelperService\nclass AgentService:\n    @staticmethod\n    def upsert_skill(skill_id: Optional[str] = None, title: Optional[str] = None, content: Optional[str] = None, examples: Optional[str] = None, file_name: Optional[str] = None, description: Optional[str] = None) -> str:\n        \"\"\"\n        Expand agent functionality through skills. Create a new skill to get a new skill ID or update a skill with a specific skill ID. The optional values will be overwritten if specified, so make sure to be inclusive of previous values (for title, content, examples, description) for any changes.\n        NOTE: Updated skill will not be reflected in any agent's that use the skill, they will need to be removed and added again to reflect new changes.\n\n        Args:\n            skill_id (Optional): The unique identifier for the skill to be updated. Leave empty when creating new skill.\n            title (Optional): The title of the skill. Must be specified for a new skill.\n            content (Optional): The detailed code or instructions that comprise the skill. Must be specified for a new skill.\n            examples (Optional): Python code examples using the skill. Must be specified for a new skill.\n            file_name (Optional): The name of the file associated with the skill. Must be specified for a new skill.\n            description (Optional): The description of the skill. Must be specified for a new skill.\n\n        Returns:\n            str: JSON string with operation outcome, including skill details or an error message.\n        \"\"\"\n        return AgentHelperService.upsert_skill(skill_id, title, content, examples, file_name, description)\n\n    @staticmethod\n    def upsert_agent(agent_id: Optional[str] = None,\n                     new_agent_type: Optional[str] = None,\n                     init_code: Optional[str] = None,\n                     name: Optional[str] = None,\n                     system_message: Optional[str] = None,\n                     description: Optional[str] = None,\n                     skills: Optional[List[str]] = None,\n                     remove_skills: Optional[List[str]]= None,\n                     groups: Optional[List[str]]= None,\n                     remove_agents: Optional[List[str]]= None) -> str:\n        \"\"\"\n        Create a new agent to get an agent ID or Update an existing agent with a specific agent ID. The optional values will be overwritten if specified, so make sure to be inclusive of previous values (for init_code, system_message, description) for any changes.\n        NOTE: Updated agents will not be reflected in existing groupchat's, they will need to be removed and added again to reflect new changes.\n\n        Args:\n            agent_id (Optional): Unique ID for the agent. Leave empty when creating new agent. Leave empty when creating new agent.\n            new_agent_type (Optional): Specify type of new agent (either 'agent' or 'groupchat'). Must be specified when creating agent. Cannot change after. Groupchat allow other agents inside a group setting to coordinate and communicate to solve tasks.\n            init_code (Optional): Python initialization code for the agent. Enables custom agent classes and agent instatiation. Must be specified when creating agent.\n            name (Optional): Agent's name. Must be specified when creating agent.\n            system_message (Optional): System message for the agent. Must be specified when creating agent.\n            description (Optional): Agent's purpose and functionality. Must be specified when creating agent.\n            skills (Optional): List of skill IDs to add to agent. Will upsert to the list of skills.\n            remove_skills (Optional): List of skill IDs to remove from agent.\n            groups (Optional): List of agent IDs to add to 'groupchat' type of agent. Will upsert to the list of agents in the group.\n            remove_agents (Optional): List of agent IDs to remove from 'groupchat' type of agent.\n\n        Returns:\n            str: JSON string with operation outcome, including agent details or an error message.\n        \"\"\"\n        return AgentHelperService.upsert_agent(agent_id, new_agent_type, init_code, name, system_message, description, skills, remove_skills, groups, remove_agents)\n\n    @staticmethod\n    def discover_services(service_type: str, queries: List[str]) -> str:\n        \"\"\"\n        Discovers services (skills or agents) based on natural language queries.\n\n        Args:\n            service_type: Type of service to discover ('skills' or 'agents').\n            queries: List of queries for discovering services.\n\n        Returns:\n            str: JSON string with discovery results including the unique skill or agent IDs.\n        \"\"\"\n        return AgentHelperService.discover_services(service_type, queries)\n",
                  "examples": "from skills import AgentService\n\n# Create a new NLP skill for task interpretation and assignment\nresponse = AgentService.upsert_skill(\n    skill_id=None,\n    title=\"NLP Task Assignment\",\n    content=\"\"\"\nfrom nlp_module import interpret_task\n\ndef assign_task(description):\n    task_details = interpret_task(description)\n    # Logic to assign task based on interpretation\n    return task_details\n\"\"\",\n    examples=\"\"\"\n# Using the NLP Task Assignment skill\nfrom skills import assign_task\n\ndescription = 'Schedule a meeting with the client next week'\ntask_details = assign_task(description)\nprint(task_details)\n\"\"\",\n    file_name=\"nlp_task_assignment.py\",\n    description=\"Interprets natural language task descriptions and assigns tasks accordingly.\"\n)\n\nprint(response)\n\n# Discover skills\nresponse = AgentService.discover_services(service_type='skills', queries=['how to parse JSON', 'image processing with Python'])\n# get skill ID\nprint(response)\n\n# Create an assistant agent (agent_id_1) with discovered skill(s)\ninit_code = 'agent = autogen.AssistantAgent(**agent_spec.config.dict())'\nresponse = AgentService.upsert_agent(agent_id=None, init_code=init_code, name='Task Assistant', system_message='Assist with various tasks.', description='An assistant designed to help with a variety of tasks.', skills=['discovered_skill_id_1'])\nprint(response)\n\n# Update agent description\ninit_code = \"agents = [self.load(self.sanitize_agent_spec(agent_spec_internal), session_id) for agent_spec_internal in agent_spec.groupchat_config.agents];group_chat_config = agent_spec.groupchat_config.dict();group_chat_config['agents'] = agents;groupchat = autogen.GroupChat(**group_chat_config);agent = autogen.GroupChatManager(groupchat=groupchat, **agent_spec.config.dict())\"\nresponse = AgentService.upsert_agent(agent_id='agent_id_1', description='New description')\nprint(response)\n\n# Create a groupchat agent with agent_id_1 added to it\ninit_code = \"agents = [self.load(self.sanitize_agent_spec(agent_spec_internal), session_id) for agent_spec_internal in agent_spec.groupchat_config.agents];group_chat_config = agent_spec.groupchat_config.dict();group_chat_config['agents'] = agents;groupchat = autogen.GroupChat(**group_chat_config);agent = autogen.GroupChatManager(groupchat=groupchat, **agent_spec.config.dict())\"\nresponse = AgentService.upsert_agent(agent_id=None, init_code=init_code, name='machine_learning_group_chat', msg='A group chat manager that has other agents specialized in machine learning which you can use to solve your task.', description='An group chat with multiple agents ready to complete your task', groups=['agent_id_1'])\nprint(response)",      
                  "file_name": "agent_service.py"
                }
              ],
              "config": {
                "name": "agent_service_worker",
                "description": "Worker within the agent_service_group with a skill to create/update/discover agents, create/update/discover skills",
                "llm_config": {
                  "config_list": [
                    {
                      "model": "gpt-4-turbo-preview"
                    }
                  ],
                  "temperature": 0.1,
                  "timeout": 600,
                  "cache_seed": 42
                },
                "human_input_mode": "NEVER",
                "max_consecutive_auto_reply": 8,
                "system_message": "You are a helpful AI assistant. You are in a group with a userproxy and a work checker. Solve tasks using your coding and language skills. In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the userproxy agent in your group to execute. 1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself. 2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly. Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill. When using code, you must indicate the script type in the code block. The userproxy can't modify your code. So do not suggest incomplete code which requires others to modify. Don't use a code block if it's not intended to be executed by the userproxy. If you want the userproxy to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask others to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the userproxy. If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try. When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible. Reply 'TERMINATE' in the end when everything is done. Use the agent_service to solve your agent related tasks. Use the agent services like lego blocks. Skill is the smallest building block, then agents and within agents group chats if necessary which allow you to add other agents. Before creating a skill try to discover one to see if an ideal skill for your task already exists. When creating a skill, test the code first by getting the userproxy to run the code and then create the skill. Prior to creating an agent do the same thing, discover first then create. When in creation mode, you should discover/create skills before discover/create agents and finally modify the new or existing agents based on the task. YOU ARE THE ONLY ONE in the group with access to the agent_service skill. The work checker in your group will double-check your work to make sure you are on the right path and the userproxy will execute code and return the response to the group.",
                "default_auto_reply": "This is the agent service worker, please assign me an agent related task so I can use my agent_service skill to work on or discover skills, agents and groups."
              }
            },
            {
              "type": "agent",
              "init_code": "agent = autogen.UserProxyAgent(**agent_spec.config.dict())",
              "config": {
                "name": "userproxy",
                "description": "A user proxy agent that executes code.",
                "llm_config": {
                  "config_list": [
                    {
                      "model": "gpt-4-turbo-preview"
                    }
                  ],
                  "temperature": 0.1,
                  "timeout": 600,
                  "cache_seed": 42
                },
                "human_input_mode": "NEVER",
                "max_consecutive_auto_reply": 8,
                "system_message": "You are a helpful assistant. You can execute code others write. You are in the agent_service_group which is tasked with creating/managing agents in an agent framework. Take a look at the message posed to the group by the user and ensure you work diligently to solve the problem by executing tasks and returning results. If the group has reached a natural conclusion and should terminate, just reply with TERMINATE",
                "default_auto_reply": "This is user proxy agent, send some code my way so I can execute it as needed.",
                "code_execution_config": {
                  "work_dir": null,
                  "use_docker": false,
                  "executor": "commandline-local"
                }
              }
            },
            {
              "type": "agent",
              "init_code": "agent = autogen.AssistantAgent(**agent_spec.config.dict())",
              "config": {
                "name": "agent_service_work_checker",
                "description": "Checks the work of agent_service_worker to ensure quality and correctness",
                "llm_config": {
                  "config_list": [
                    {
                      "model": "gpt-4-turbo-preview"
                    }
                  ],
                  "temperature": 0.1,
                  "timeout": 600,
                  "cache_seed": 42
                },
                "human_input_mode": "NEVER",
                "max_consecutive_auto_reply": 8,
                "system_message": "You are a helpful AI assistant. Your job is to check the work of agent_service_worker and make sure based on the task the group is working on is efficiently solved. You can review the process and use common sense to solve the task or direct the worker to create code and the userproxy agent in your group will execute and report the responses back to the group. Make sure the task is fully solved before you agree that group has reached a natural conclusion. If its not solvable you can also explain why and try to steer the group towards closure. The worker is the only agent in the group which has access to the skill which guides the agent to create code to create/manage/discover agents/skills/groups. Think of the agent services as lego blocks. Groups may depend on agents inside (group is just a type of agent), agents may depend on skills which get added to them and skills are just python routines the worker can create for the userproxy to execute.",
                "default_auto_reply": "This is the agent_service_work_checker, I check the work of agent_service_worker and suggest corrective actions as needed."
              }
            }
          ]
        }
      }
    }
  ]
}
